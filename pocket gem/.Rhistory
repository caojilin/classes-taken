knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(glmnet)
library(PRROC)
library(randomForest)
library(e1071)
# import data
iaps = read.csv("iaps.csv")
# sessions = read.csv("sessions.csv")
users = read.csv("users.csv")
spendevents = read.csv("spendevents.csv")
id = users$udid
#inspect a single player's spending history first
spendevents[spendevents$udid == "d99969a86fda43cda815e5870d76aed2",]
#the number of unique users:
length(unique(users$udid))
#the number of players who pay
payer.id = spendevents$udid[spendevents$spendtype == "IAP" | spendevents$spendtype == "valuepack"]
#unique payers
length(unique(payer.id))
#user played the game but not generate revenue
non_payer.id = spendevents$udid[spendevents$spendtype != "IAP" & spendevents$spendtype != "valuepack"]
#unique non-payers, they played the game and had activities in the game but did not spend
length(unique(non_payer.id))
#among players who had activities in the game, only 6% of them spent money
1194/(1194+18017)
#15% users installed the game but did not have any activities such as earning gems. This might mean they installed the game but did not play at all.
(22576-(1194+18017))/22576
# we merge two tables that we are interested in
all = merge(spendevents, users, by = "udid")
# select all rows which are payers
all.paied = all[all$udid %in% payer.id,]
# select rows with 'IAP' and 'valuepack' entries
all.paied = all.paied[all.paied$spendtype == 'IAP' | all.paied$spendtype == 'valuepack',]
# unique payers tables
all.paied = subset(all.paied,!duplicated(all.paied$udid))
# all users table
all = subset(all,!duplicated(all$udid))
all$payer = all$spendtype == 'IAP' | all$spendtype == 'valuepack'
country = sort(table(all$country), decreasing = T)
country.names = names(country)
all = all[all$country %in% country.names[1:20],]
all$country = droplevels(all$country)
# Stacked
ggplot(all[all$country %in% country.names[1:10],], aes(fill=payer,x=reorder(country,country,
function(x)-length(x)))) +
geom_bar(stat = 'count')+
labs(x = "countries")+
ggtitle("Top 10 countries payer vs non-payer")
platform = sort(table(all$hw_ver), decreasing = T)
#U.S. is the main targe country, 70% payers come from U.S.
ggplot(all[all$hw_ver %in% names(platform)[1:10],], aes(fill=payer,x=reorder(hw_ver,hw_ver,
function(x)-length(x)))) +
geom_bar(stat = 'count') +
labs(x = "platform")+  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
ggtitle("Top 10 platform payer vs non-payer")
platform = sort(table(all$hw_ver[all$payer==T]), decreasing = T)
platform[1:3]/sum(platform)
lang = sort(table(all$lang), decreasing = T)
lang.names = names(lang)
all = all[all$lang %in% lang.names[1:13],]
all$lang = droplevels(all$lang)
# Stacked
ggplot(all[all$lang %in% lang.names[1:10],], aes(fill=payer,x=reorder(lang,lang,
function(x)-length(x)))) +
geom_bar(stat = 'count')+
labs(x = "languages")+
ggtitle("Top 10 languages payer vs non-payer")
#the time (days) between installing the game and made the first purchase.
days = as.integer( difftime(all.paied$date, all.paied$install_date,units = c("days")))
days[days == 0] = 1
all.paied$days = days
ggplot(all.paied[all.paied$days <=20,], aes(x=reorder(days,days,
function(x)-length(x)))) +
geom_bar(stat = 'count', fill="brown1") +
labs(x = "days between installing the game and made the first purchase")+  theme(axis.text.x = element_text(angle = 45, hjust = 1))
table(days)[1]/sum(table(days))
all$days = all.paied$days[match(all$udid, all.paied$udid)]
all$days[is.na(all$days)] = 0
all$currency = NULL
# set.seed(123)
all$payer = factor(all$payer)
train_ind <- sample(seq_len(nrow(all)), size = nrow(all)*0.8)
train <- all[train_ind, ]
test <- all[-train_ind, ]
table(all$payer)
table(train$payer)
table(test$payer)
# formula = formula("payer ~ story + spendtype + lang + country + hw_ver + days")
# x = model.matrix(formula, train)
#
# # cvfit = cv.glmnet(x, train$payer, family = "binomial",
# #                    type.measure = "class")
#
# # model = glmnet(x, train$payer, family = "binomial", lambda = cvfit$lambda.min, alpha = 0 )
#
# test.feature = model.matrix(formula, test)
#
# y_hat_logistic = as.numeric(predict(cvfit,test.feature , s = "lambda.min", type = "response"))
#
# fg1 <- y_hat_logistic[test$payer == TRUE]
# bg1 <- y_hat_logistic[test$payer == FALSE]
#
# roc1 = roc.curve(fg1, bg1, curve = T)
# pr1 = pr.curve(fg1, bg1, curve = T)
# plot(roc1)
# plot(pr1)
fit_randomForest = randomForest(payer ~ story + spendtype + lang + country +
hw_ver + days,
data = train, importance= T,
ntree = 100)
y_hat = predict(fit_randomForest, test, type = "response")
mean(y_hat == test$payer)
mean(y_hat == test$payer)
library(pROC)
roc_obj <- roc(test$payer, y_hat)
y_hat
test$payer
y_hat
y_hat[y_hat == FALSE] = 0
y_hat[y_hat == TRUE] = 1
test$payer[test$payer == FALSE] = 0
test$payer[test$payer == TRUE] = 1
y_hat
y_hat = predict(fit_randomForest, test, type = "response")
y_hat
test$payer
y_hat[y_hat == FALSE] = 0
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(glmnet)
library(PRROC)
library(randomForest)
library(e1071)
# import data
iaps = read.csv("iaps.csv")
# sessions = read.csv("sessions.csv")
users = read.csv("users.csv")
spendevents = read.csv("spendevents.csv")
id = users$udid
#inspect a single player's spending history first
spendevents[spendevents$udid == "d99969a86fda43cda815e5870d76aed2",]
#the number of unique users:
length(unique(users$udid))
#the number of players who pay
payer.id = spendevents$udid[spendevents$spendtype == "IAP" | spendevents$spendtype == "valuepack"]
#unique payers
length(unique(payer.id))
#user played the game but not generate revenue
non_payer.id = spendevents$udid[spendevents$spendtype != "IAP" & spendevents$spendtype != "valuepack"]
#unique non-payers, they played the game and had activities in the game but did not spend
length(unique(non_payer.id))
#among players who had activities in the game, only 6% of them spent money
1194/(1194+18017)
#15% users installed the game but did not have any activities such as earning gems. This might mean they installed the game but did not play at all.
(22576-(1194+18017))/22576
# we merge two tables that we are interested in
all = merge(spendevents, users, by = "udid")
# select all rows which are payers
all.paied = all[all$udid %in% payer.id,]
# select rows with 'IAP' and 'valuepack' entries
all.paied = all.paied[all.paied$spendtype == 'IAP' | all.paied$spendtype == 'valuepack',]
# unique payers tables
all.paied = subset(all.paied,!duplicated(all.paied$udid))
# all users table
all = subset(all,!duplicated(all$udid))
all$payer = all$spendtype == 'IAP' | all$spendtype == 'valuepack'
country = sort(table(all$country), decreasing = T)
country.names = names(country)
all = all[all$country %in% country.names[1:20],]
all$country = droplevels(all$country)
# Stacked
ggplot(all[all$country %in% country.names[1:10],], aes(fill=payer,x=reorder(country,country,
function(x)-length(x)))) +
geom_bar(stat = 'count')+
labs(x = "countries")+
ggtitle("Top 10 countries payer vs non-payer")
platform = sort(table(all$hw_ver), decreasing = T)
#U.S. is the main targe country, 70% payers come from U.S.
ggplot(all[all$hw_ver %in% names(platform)[1:10],], aes(fill=payer,x=reorder(hw_ver,hw_ver,
function(x)-length(x)))) +
geom_bar(stat = 'count') +
labs(x = "platform")+  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
ggtitle("Top 10 platform payer vs non-payer")
platform = sort(table(all$hw_ver[all$payer==T]), decreasing = T)
platform[1:3]/sum(platform)
lang = sort(table(all$lang), decreasing = T)
lang.names = names(lang)
all = all[all$lang %in% lang.names[1:13],]
all$lang = droplevels(all$lang)
# Stacked
ggplot(all[all$lang %in% lang.names[1:10],], aes(fill=payer,x=reorder(lang,lang,
function(x)-length(x)))) +
geom_bar(stat = 'count')+
labs(x = "languages")+
ggtitle("Top 10 languages payer vs non-payer")
#the time (days) between installing the game and made the first purchase.
days = as.integer( difftime(all.paied$date, all.paied$install_date,units = c("days")))
days[days == 0] = 1
all.paied$days = days
ggplot(all.paied[all.paied$days <=20,], aes(x=reorder(days,days,
function(x)-length(x)))) +
geom_bar(stat = 'count', fill="brown1") +
labs(x = "days between installing the game and made the first purchase")+  theme(axis.text.x = element_text(angle = 45, hjust = 1))
table(days)[1]/sum(table(days))
all$days = all.paied$days[match(all$udid, all.paied$udid)]
all$days[is.na(all$days)] = 0
all$currency = NULL
# set.seed(123)
all$payer[all$payer == FALSE] = 0
all$payer[all$payer == TRUE] = 1
train_ind <- sample(seq_len(nrow(all)), size = nrow(all)*0.8)
train <- all[train_ind, ]
test <- all[-train_ind, ]
table(all$payer)
table(train$payer)
table(test$payer)
fit_randomForest = randomForest(payer ~ story + spendtype + lang + country +
hw_ver + days,
data = train, importance= T,
ntree = 100)
all$payer = factor(all$payer)
fit_randomForest = randomForest(payer ~ story + spendtype + lang + country +
hw_ver + days,
data = train, importance= T,
ntree = 100)
y_hat = predict(fit_randomForest, test, type = "response")
mean(y_hat == test$payer)
fit_svm <- svm(payer ~ story + spendtype + lang + country +
hw_ver + days, data = train)
y_hat = predict(fit_svm, test )
mean(y_hat == test$payer)
Y_HAT
y_hat
y_hat = predict(fit_svm, test, type="response")
y_hat
y_hat = predict(fit_svm, test, type="class")
y_hat
all$payer
fit_randomForest = randomForest(payer ~ story + spendtype + lang + country +
hw_ver + days,
data = train, importance= T,
ntree = 100)
all$payer = factor(all$payer)
train_ind <- sample(seq_len(nrow(all)), size = nrow(all)*0.8)
train <- all[train_ind, ]
test <- all[-train_ind, ]
table(all$payer)
table(train$payer)
table(test$payer)
fit_randomForest = randomForest(payer ~ story + spendtype + lang + country +
hw_ver + days,
data = train, importance= T,
ntree = 100)
y_hat = predict(fit_randomForest, test, type = "response")
y_hat
mean(y_hat == test$payer)
library(pROC)
roc_obj <- roc(test$payer, y_hat)
y_hat
test$payer
y_hat
as.vector(y_hat)
as.integer(y_hat)
roc_obj <- roc(test$payer, as.integer(y_hat))
auc(roc_obj)
install.packages("DMwR")
library(DMwR)
newData <- SMOTE(payer ~ story + spendtype + lang + country + hw_ver + days, all, perc.over = 600)
table(newData$payer)
table(all$payer)
newData <- SMOTE(payer ~ story + spendtype + lang + country + hw_ver + days, all, perc.over = 200)
table(newData$payer)
newData <- SMOTE(payer ~ story + spendtype + lang + country + hw_ver + days, all, perc.over = 200, perc.under = 200)
table(newData$payer)
newData <- SMOTE(payer ~ story + spendtype + lang + country + hw_ver + days, all, perc.over = 600, perc.under = 100)
table(newData$payer)
data(iris)
data <- iris[, c(1, 2, 5)]
data$Species <- factor(ifelse(data$Species == "setosa","rare","common"))
## checking the class distribution of this artificial data set
table(data$Species)
## now using SMOTE to create a more "balanced problem"
newData <- SMOTE(Species ~ ., data, perc.over = 600,perc.under=100)
table(newData$Species)
newData <- SMOTE(payer ~ story + spendtype + lang + country + hw_ver + days, all, perc.over = 600, perc.under = 200)
data(iris)
data <- iris[, c(1, 2, 5)]
data$Species <- factor(ifelse(data$Species == "setosa","rare","common"))
## checking the class distribution of this artificial data set
table(data$Species)
## now using SMOTE to create a more "balanced problem"
newData <- SMOTE(Species ~ ., data, perc.over = 600,perc.under=100)
table(newData$Species)
data(iris)
data <- iris[, c(1, 2, 5)]
data$Species <- factor(ifelse(data$Species == "setosa","rare","common"))
## checking the class distribution of this artificial data set
table(data$Species)
## now using SMOTE to create a more "balanced problem"
newData <- SMOTE(Species ~ ., data, perc.over = 600,perc.under=100)
table(newData$Species)
data(iris)
data <- iris[, c(1, 2, 5)]
data$Species <- factor(ifelse(data$Species == "setosa","rare","common"))
## checking the class distribution of this artificial data set
table(data$Species)
## now using SMOTE to create a more "balanced problem"
newData <- SMOTE(Species ~ ., data, perc.over = 300,perc.under=100)
table(newData$Species)
data(iris)
data <- iris[, c(1, 2, 5)]
data$Species <- factor(ifelse(data$Species == "setosa","rare","common"))
## checking the class distribution of this artificial data set
table(data$Species)
## now using SMOTE to create a more "balanced problem"
newData <- SMOTE(Species ~ ., data, perc.over = 600,perc.under=100)
table(newData$Species)
data(iris)
data <- iris[, c(1, 2, 5)]
data$Species <- factor(ifelse(data$Species == "setosa","rare","common"))
## checking the class distribution of this artificial data set
table(data$Species)
## now using SMOTE to create a more "balanced problem"
newData <- SMOTE(Species ~ ., data, perc.over = 600,perc.under=200)
table(newData$Species)
newData <- SMOTE(payer ~ story + spendtype + lang + country + hw_ver + days, all, perc.over = 600, perc.under = 100)
table(newData$payer)
train_ind <- sample(seq_len(nrow(newData)), size = nrow(newData)*0.8)
train <- newData[train_ind, ]
test <- newData[-train_ind, ]
table(newData$payer)
table(train$payer)
table(test$payer)
table(train$payer)
table(test$payer)
fit_svm <- svm(payer ~ story + spendtype + lang + country +
hw_ver + days, data = train)
y_hat = predict(fit_svm, test)
mean(y_hat == test$payer)
fit_randomForest = randomForest(payer ~ story + spendtype + lang + country +
hw_ver + days,
data = train, importance= T,
ntree = 100)
y_hat = predict(fit_randomForest, test, type = "response")
mean(y_hat == test$payer)
